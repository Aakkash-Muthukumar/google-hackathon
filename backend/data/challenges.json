[
  {
    "title": "Array Transformation Challenge",
    "description": "Given an array of positive integers, transform the array into a new array where each element is the sum of the elements at the same index in the original array and the element at the (index + 1) in the original array. If the index is out of bounds, treat the element at the next index as 0.  The transformed array should be sorted in ascending order.  Return the transformed array.",
    "difficulty": "easy",
    "language": "python",
    "topic": "arrays",
    "xpReward": 65,
    "input_format": "A list of positive integers.",
    "output_format": "A sorted list of integers representing the transformed array.",
    "template": "def transform_array(arr):\n    \"\"\"Transforms an array based on the specified rule and sorts the result. \n\n    Args:\n        arr: A list of positive integers.\n\n    Returns:\n        A sorted list of integers representing the transformed array.\n    \"\"\"\n    # Your code here\n    pass",
    "examples": [
      {
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "output": [
          3,
          5,
          7,
          9,
          11
        ]
      },
      {
        "input": [
          10,
          20,
          30
        ],
        "output": [
          30,
          50,
          70
        ]
      },
      {
        "input": [
          1,
          2
        ],
        "output": [
          3,
          4
        ]
      },
      {
        "input": [
          5
        ],
        "output": [
          10
        ]
      },
      {
        "input": [
          1,
          1,
          1,
          1
        ],
        "output": [
          2,
          2,
          2,
          2
        ]
      }
    ],
    "id": 1
  },
  {
    "title": "String Transformation with Character Counts",
    "description": "Given a string, implement a function to transform it into a new string where each character is replaced by a character that represents the frequency of the character in the original string. If a character appears 0 times, it should be replaced with a space. The transformation should be done in place, modifying the original string.  The frequency of a character is calculated by counting how many times it appears in the string.  The new string should be formed by iterating through the original string and replacing each character with its frequency.  If the frequency is 0, a space is used.",
    "difficulty": "easy",
    "language": "python",
    "topic": "strings",
    "xpReward": 65,
    "input_format": "A single string as a string.",
    "output_format": "The transformed string, where each character is replaced by its frequency in the original string.  Characters appearing 0 times are replaced with spaces.",
    "template": "def transform_string(input_string):\n    \"\"\"Transforms a string into a new string based on character frequencies.\n\n    Args:\n        input_string: The input string to transform.\n\n    Returns:\n        The transformed string.\n    \"\"\"\n    # Your code here\n    pass",
    "examples": [
      {
        "input": "hello",
        "output": "h e l l o"
      },
      {
        "input": "banana",
        "output": "b a n a n a"
      },
      {
        "input": "abc",
        "output": "a b c"
      },
      {
        "input": "aabbcc",
        "output": "a a b b c c"
      },
      {
        "input": "xyz",
        "output": "x y z"
      }
    ],
    "id": 2
  },
  {
    "title": "String Cipher Decrypter",
    "description": "You are given a string and a key. The key is a sequence of characters that, when applied to the string, performs a specific cipher. The cipher involves shifting each character in the string by a certain amount based on its position in the alphabet (a=1, b=2, etc.). The key dictates the shift amount for each character.  Your task is to write a function that decrypts the string using the provided key. The decryption should be performed character by character, applying the shift value to each character's position in the alphabet. If a character is not a letter, it should remain unchanged. The function should return the decrypted string.",
    "difficulty": "easy",
    "language": "python",
    "topic": "strings",
    "xpReward": 65,
    "input_format": "A string (the text to be decrypted) and a string (the key, representing the shift amount for each character).",
    "output_format": "A string (the decrypted text).",
    "template": "def decrypt_string(grid):\n    \"\"\"Calculates the perimeter of the islands in a 2D grid.\"\"\"\n    # Your code here\n    pass",
    "examples": [
      {
        "input": "hello",
        "output": "khoor",
        "output_description": "The key 'abc' shifts each character by 1. 'h' becomes 'i', 'e' becomes 'f', 'l' becomes 'm', 'l' becomes 'm', 'o' becomes 'p'."
      },
      {
        "input": "xyz",
        "output": "abc",
        "output_description": "The key 'abc' shifts each character by 1. 'x' becomes 'a', 'y' becomes 'b', 'z' becomes 'c'."
      },
      {
        "input": "ABC",
        "output": "DEF",
        "output_description": "The key 'abc' shifts each character by 1. 'A' becomes 'D', 'B' becomes 'E', 'C' becomes 'F'."
      },
      {
        "input": "Hello World!",
        "output": "Khoor Zruog!",
        "output_description": "The key 'abc' shifts each character by 1. Spaces and punctuation remain unchanged."
      }
    ],
    "id": 3
  }
]