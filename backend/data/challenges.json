[
  {
    "title": "Consecutive Sum Challenge",
    "description": "Given a list of non-negative integers, find the largest sum of consecutive elements within the list that does not exceed a given threshold. The consecutive elements must be contiguous. If no such sequence exists, return 0. \n\nFor example, if the list is [1, 2, 3, 4, 5] and the threshold is 7, the largest sum of consecutive elements not exceeding 7 is 6 (2 + 4). If the list is [1, 2, 3] and the threshold is 0, the answer is 0.",
    "difficulty": "easy",
    "language": "python",
    "topic": "algorithms",
    "xpReward": 60,
    "input_format": "A list of non-negative integers and an integer representing the threshold. The list will contain between 1 and 100 integers. The threshold will be between 0 and 100.",
    "output_format": "An integer representing the largest sum of consecutive elements that does not exceed the threshold. If no such sequence exists, return 0.",
    "template": "def find_largest_consecutive_sum(numbers, threshold):\n    \"\"\"Finds the largest sum of consecutive elements in a list that does not exceed a given threshold.\n\n    Args:\n        numbers (list): A list of non-negative integers.\n        threshold (int): The maximum allowed sum.\n\n    Returns:\n        int: The largest sum of consecutive elements not exceeding the threshold, or 0 if no such sequence exists.\n    \"\"\"\n    # Your code here\n    pass",
    "examples": [
      {
        "input": "[1, 2, 3, 4, 5]",
        "output": 6
      },
      {
        "input": "[1, 2, 3]",
        "output": 0
      },
      {
        "input": "[5, 5, 5, 5]",
        "output": 15
      },
      {
        "input": "[10, 2, -5, 1, 8]",
        "output": 10
      },
      {
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": 15
      }
    ],
    "id": 1,
    "completed": false
  },
  {
    "title": "Hidden Sequence",
    "description": "Given a list of integers, identify the longest subsequence where each element is greater than the previous one by exactly 1. The subsequence doesn't need to be contiguous in the original list. Return the length of this longest hidden sequence.",
    "difficulty": "easy",
    "language": "python",
    "topic": "algorithm",
    "xpReward": 65,
    "input_format": "A list of integers.",
    "output_format": "An integer representing the length of the longest hidden sequence.",
    "template": "def find_longest_hidden_sequence(nums):\n    \"\"\"Finds the length of the longest hidden sequence in a list of integers.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        An integer representing the length of the longest hidden sequence.\n    \"\"\"\n    # Your code here\n    pass",
    "examples": [
      {
        "input": "[1, 2, 3, 4, 5]",
        "output": "5"
      },
      {
        "input": "[1, 3, 5, 7, 9]",
        "output": "1"
      },
      {
        "input": "[1, 2, 1, 2, 3]",
        "output": "3"
      },
      {
        "input": "[5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "[1, 2, 4, 3, 5]",
        "output": "3"
      }
    ],
    "id": 2,
    "completed": false
  },
  {
    "title": "Array Reordering Challenge",
    "description": "Given an array of integers, rearrange the array such that all elements with even indices are greater than all elements with odd indices. If an element with an odd index is greater than an element with an even index, swap them.  The relative order of the even and odd indexed elements should be maintained within their respective groups.  For example, if the input is `[1, 2, 3, 4, 5]`, the output should be `[2, 1, 4, 3, 5]`. If the input is `[5, 1, 4, 2, 3]`, the output should be `[4, 1, 5, 2, 3]`. If the input is `[1, 2, 3]`, the output should be `[2, 1, 3]`. If the input is `[2, 1, 3]`, the output should be `[2, 3, 1]`. If the input is `[1, 3, 5, 2, 4]`, the output should be `[3, 1, 5, 2, 4]`. ",
    "difficulty": "easy",
    "language": "python",
    "topic": "arrays",
    "xpReward": 60,
    "input_format": "A list of integers.",
    "output_format": "A list of integers representing the rearranged array.",
    "template": "def rearrange_array(arr):\n   \"\"\"Rearranges an array so that elements at even indices are greater than elements at odd indices, maintaining relative order within groups.\n\n   Args:\n       arr (list of int): The input array of integers.\n\n   Returns:\n       list of int: The rearranged array.\n   \"\"\"\n   # Your code here\n   pass",
    "examples": [
      {
        "input": "[1, 2, 3, 4, 5]",
        "output": "[2, 1, 4, 3, 5]"
      },
      {
        "input": "[5, 1, 4, 2, 3]",
        "output": "[4, 1, 5, 2, 3]"
      },
      {
        "input": "[1, 2, 3]",
        "output": "[2, 1, 3]"
      },
      {
        "input": "[2, 1, 3]",
        "output": "[2, 3, 1]"
      },
      {
        "input": "[1, 3, 5, 2, 4]",
        "output": "[3, 1, 5, 2, 4]"
      }
    ],
    "id": 3,
    "completed": false
  },
  {
    "title": "Prime Factor Sum Challenge",
    "description": "Given a positive integer `n`, find the sum of the distinct prime factors of `n`.  For example, if `n` is 12, the prime factors are 2 and 3, and their sum is 5.  If `n` is 36, the prime factors are 2 and 3, and their sum is 5. If `n` is 25, the prime factor is 5, and the sum is 5.  If `n` is 7, the prime factor is 7, and the sum is 7.  The input number `n` will be between 1 and 1000 inclusive.",
    "difficulty": "easy",
    "language": "python",
    "topic": "algorithms",
    "xpReward": 60,
    "input_format": "An integer `n` (1 <= n <= 1000).",
    "output_format": "An integer representing the sum of the distinct prime factors of `n`.",
    "template": "def prime_factor_sum(n):\n   \"\"\"Calculates the sum of the distinct prime factors of a given integer.\n\n   Args:\n       n: A positive integer.\n\n   Returns:\n       The sum of the distinct prime factors of n.\n   \"\"\"\n   # Your code here\n   pass",
    "examples": [
      {
        "input": 12,
        "output": 5
      },
      {
        "input": 36,
        "output": 5
      },
      {
        "input": 25,
        "output": 5
      },
      {
        "input": 7,
        "output": 7
      },
      {
        "input": 1,
        "output": 0
      },
      {
        "input": 100,
        "output": 7
      }
    ],
    "id": 4,
    "completed": false
  },
  {
    "title": "Island Perimeter",
    "description": "Given a 2D grid representing a map where '1' represents land and '0' represents water, calculate the perimeter of each island. An island is a group of connected '1's. The perimeter of an island is the number of water cells ('0') adjacent to land cells ('1').  Each land cell is adjacent to up, down, left, and right neighbors.  Assume the grid is surrounded by water.  The grid will only contain 1s and 0s.  Multiple islands may be present in the grid.  The function should return a list of the perimeters of all islands in the grid.",
    "difficulty": "easy",
    "language": "python",
    "topic": "algorithms",
    "xpReward": 60,
    "input_format": "A 2D list (list of lists) of integers, where 1 represents land and 0 represents water.",
    "output_format": "A list of integers, where each integer represents the perimeter of an island. The order of the perimeters in the list should match the order of the islands in the input grid (reading left to right, top to bottom).",
    "template": "def island_perimeter(grid):\n   \"\"\"Calculates the perimeter of each island in a 2D grid.\n\n   Args:\n       grid: A 2D list of integers representing the map.\n\n   Returns:\n       A list of integers representing the perimeters of each island.\n   \"\"\"\n   # Your code here\n   pass",
    "examples": [
      {
        "input": [
          [
            0,
            1,
            0,
            0
          ],
          [
            1,
            1,
            1,
            0
          ],
          [
            0,
            1,
            0,
            0
          ],
          [
            1,
            1,
            0,
            0
          ]
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          [
            1
          ]
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          [
            1,
            0
          ]
        ],
        "output": [
          4,
          4
        ]
      },
      {
        "input": [
          [
            1,
            1
          ],
          [
            1,
            1
          ]
        ],
        "output": [
          8
        ]
      }
    ],
    "id": 5,
    "completed": false
  },
  {
    "id": 6,
    "title": "Binary Search Tree Validation",
    "description": "Given a binary tree, determine if it is a valid binary search tree (BST). A BST is valid if for every node, all nodes in its left subtree have values less than the node's value, and all nodes in its right subtree have values greater than the node's value.",
    "difficulty": "medium",
    "language": "python",
    "topic": "dynamic-programming",
    "xpReward": 75,
    "input_format": "Varies based on the specific challenge",
    "output_format": "Varies based on the specific challenge",
    "template": "def is_valid_bst(root):\n    \"\"\"Checks if the binary tree is a valid BST.\"\"\"\n    # Your code here\n    pass",
    "examples": [
      {
        "input": "TreeNode(2, TreeNode(1), TreeNode(3))",
        "output": "True"
      },
      {
        "input": "TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6)))",
        "output": "False"
      }
    ],
    "completed": false
  },
  {
    "title": "Array Partition Sum",
    "description": "Given an array of integers `nums` and an integer `k`, determine if it's possible to partition the array into two non-empty subsets such that the absolute difference between the sums of the two subsets is at most `k`. \n\nFor example, if `nums = [1, 2, 3, 4]` and `k = 2`, we want to see if we can divide `nums` into two subsets whose sums differ by at most 2.  One possible partition is `{1, 2, 3}, {4}`, which has sums of 6 and 4, a difference of 2. Another is `{1, 4}, {2, 3}`, which has sums of 5 and 5, a difference of 0.  \n\nThis problem requires exploring different combinations of subsets and calculating their sums to determine if the condition is met.",
    "difficulty": "easy",
    "language": "python",
    "topic": "arrays",
    "xpReward": 60,
    "input_format": "A list of integers `nums` and an integer `k`.",
    "output_format": "An integer, 1 if a valid partition exists, 0 otherwise.",
    "template": "def can_partition(nums, k):\n   \"\"\"Determines if the array can be partitioned into two subsets with a difference of at most k.\n\n   Args:\n       nums (list of int): The input array of integers.\n       k (int): The maximum allowed difference between subset sums.\n\n   Returns:\n       int: 1 if a valid partition exists, 0 otherwise.\n   \"\"\"\n   # Your code here\n   pass",
    "examples": [
      {
        "input": "[1, 2, 3, 4]",
        "output": 1
      },
      {
        "input": "[1, 5, 3, 8]",
        "output": 1
      },
      {
        "input": "[1, 2, 3]",
        "output": 0
      },
      {
        "input": "[10, 4, 6, 3, 7, 9, 2]",
        "output": 1
      },
      {
        "input": "[1, 1, 1, 1, 1]",
        "output": 1
      }
    ],
    "id": 7,
    "completed": false
  }
]