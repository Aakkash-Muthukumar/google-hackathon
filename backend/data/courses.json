[
  {
    "id": "1",
    "title": "Learning the fundamentals",
    "description": "Teach about data types, control flows, and basic data structures.",
    "difficulty": "beginner",
    "language": "python",
    "progress": 0,
    "totalXP": 1000,
    "dailyStreak": 0,
    "topics": [
      "String, array"
    ],
    "estimatedHours": 10,
    "completed": false,
    "thumbnail": null,
    "lessons": [
      {
        "id": "1_lesson_1",
        "title": "Data Types",
        "description": "This lesson will teach user about the primitive and non-primitive data types.",
        "content": "Okay, let's craft a comprehensive lesson on Data Types in Python, designed for beginners.  I'll structure it as you requested, with detailed explanations, code examples, practice exercises, and key takeaways.\n\n\n\n## Python Fundamentals: Lesson - Data Types\n\n**Difficulty:** Beginner\n**Language:** Python\n**Duration:** Approximately 60-90 minutes (can be adjusted)\n\n\n\n---\n\n### 1. Lesson Content: Introduction to Data Types\n\n**Description:** This lesson introduces the fundamental concept of data types in programming. We'll explore primitive (built-in) and non-primitive (user-defined) data types in Python, covering their characteristics, usage, and how to work with them.\n\n**1.1 What are Data Types?**\n\nIn programming, a *data type* specifies the kind of value a variable can hold.  Think of it like classifying objects in the real world \u2013 you have numbers, text, booleans (true/false), etc.  The data type determines what operations you can perform on a value.  \n\nPython is a *dynamically typed* language. This means you don't need to explicitly declare the data type of a variable. Python infers it based on the value you assign to it.\n\n**1.2 Primitive (Built-in) Data Types**\n\nThese are the basic, fundamental data types that are built into Python. They are immutable, meaning their values cannot be changed directly.\n\n*   **Integer (int):** Represents whole numbers (positive, negative, or zero) without any decimal point.\n    *   Example: `10`, `-5`, `0`, `1000`\n*   **Float (float):** Represents numbers with a decimal point.\n    *   Example: `3.14`, `-2.5`, `0.0`, `1.618`\n*   **String (str):** Represents a sequence of characters. Strings are enclosed in single quotes (`'...'`) or double quotes (`\"...\"`).\n    *   Example: `\"Hello\"`, `'Python'`, `\"123\"`\n*   **Boolean (bool):** Represents truth values: either `True` or `False`.  Used for logical operations.\n    *   Example: `True`, `False`\n*   **NoneType (None):** Represents the absence of a value or a null value.  It's often used to indicate that a variable hasn't been assigned a value yet or that a function doesn't return anything.\n    *   Example: `None`\n\n\n\n**1.3 Non-Primitive (User-Defined) Data Types**\n\nThese data types are created by the programmer.\n\n*   **List (list):** An ordered collection of items. Lists are mutable (their contents can be changed).  Items can be of different data types.  Lists are enclosed in square brackets `[...]`.\n    *   Example: `[1, 2, 3]`, `['apple', 'banana', 'cherry']`, `[1, 'hello', True]`\n*   **Tuple (tuple):** An ordered collection of items, similar to a list, but *immutable* (cannot be changed after creation). Tuples are enclosed in parentheses `(...)`.\n    *   Example: `(1, 2, 3)`, `('red', 'green', 'blue')`\n*   **Dictionary (dict):** A collection of key-value pairs.  Keys must be unique and immutable (usually strings or numbers).  Dictionaries are enclosed in curly braces `{...}`.\n    *   Example: `{'name': 'Alice', 'age': 30}`, `{1: 'one', 2: 'two'}`\n*   **Set (set):** An unordered collection of unique items. Sets are mutable.  Sets are enclosed in curly braces `{...}`.\n    *   Example: `{1, 2, 3}`, `{'apple', 'banana', 'cherry'}`\n\n\n\n---\n\n### 2. Code Examples\n\n```python\n# Integer\nage = 30\nprint(type(age))  # Output: <class 'int'>\n\n# Float\nprice = 19.99\nprint(type(price))  # Output: <class 'float'>\n\n# String\nname = \"Bob\"\nprint(type(name))  # Output: <class 'str'>\n\n# Boolean\nis_student = True\nprint(type(is_student))  # Output: <class 'bool'>\n\n# None\nempty_value = None\nprint(type(empty_value)) # Output: <class 'NoneType'>\n\n# List\nmy_list = [1, 2, \"three\"]\nprint(type(my_list)) # Output: <class 'list'>\n\n# Tuple\nmy_tuple = (1, 2, 3)\nprint(type(my_tuple)) # Output: <class 'tuple'>\n\n# Dictionary\nmy_dict = {\"name\": \"Charlie\", \"age\": 25}\nprint(type(my_dict)) # Output: <class 'dict'>\n\n# Set\nmy_set = {1, 2, 2, 3} # Duplicate 2 is automatically removed\nprint(type(my_set)) # Output: <class 'set'>\nprint(my_set) # Output: {1, 2, 3}\n```\n\n---\n\n### 3. Practice Exercises\n\n**Exercise 1:**\n\n1.  Create a variable named `number` and assign it an integer value.\n2.  Create a variable named `pi` and assign it a float value (approximately 3.14159).\n3.  Create a variable named `greeting` and assign it a string value.\n4.  Create a variable named `is_valid` and assign it a boolean value.\n5.  Create a variable named `no_value` and assign it `None`.\n6.  Create a list containing your name, age, and favorite color.\n7.  Create a tuple containing the coordinates (x, y) of a point.\n8.  Create a dictionary to store information about a person (name, age, city).\n9.  Create a set containing the numbers 1 to 10.\n\n**Exercise 2:**\n\nFor each of the following variables, predict the data type:\n\n1.  `total_score = 100`\n2.  `average = 75.5`\n3.  `message = \"Hello, world!\"`\n4.  `is_finished = False`\n5.  `result = None`\n6.  `colors = [\"red\", \"green\", \"blue\"]`\n7.  `point = (10, 20)`\n8.  `person = {\"name\": \"David\", \"age\": 40}`\n9.  `unique_numbers = {1, 2, 3, 3, 4}`\n\n\n\n---\n\n### 4. Key Takeaways\n\n*   **Data types are fundamental:** They define the kind of values your variables can hold and the operations you can perform on them.\n*   **Primitive vs. Non-Primitive:**  Understand the difference between built-in (primitive) and user-defined (non-primitive) data types.\n*   **Immutability:**  Primitive data types (int, float, str, bool, None) are immutable; their values cannot be changed directly.  Lists, tuples, dictionaries, and sets are mutable.\n*   **Type Conversion:** You can convert between data types using built-in functions like `int()`, `float()`, `str()`, `bool()`, `list()`, `tuple()`, `dict()`, and `set()`.  (We'll cover this in more detail later.)\n*   **Choosing the Right Type:**  Selecting the appropriate data type is crucial for efficient and correct programming.  Consider the nature of the data you're working with when choosing a data type.\n\n\n\n---\n\n**Further Exploration:**\n\n*   **`type()` function:**  Use the `type()` function to determine the data type of a variable.\n*   **Type Conversion:**  Explore how to convert between different data types.\n*   **Data Type Usage:**  Practice using different data types in simple programs.\n\n\n\nI hope this comprehensive lesson helps you understand data types in Python!  Let me know if you have any questions or would like me to elaborate on any specific aspect.  I'm here to help you succeed!\n\n\n\n",
        "order": 1,
        "completed": false,
        "xpReward": 1000,
        "createdAt": "2025-07-31T19:37:10.782510",
        "updatedAt": "2025-07-31T19:37:10.783339"
      }
    ],
    "createdAt": "2025-07-31T19:35:03.654348",
    "updatedAt": "2025-07-31T19:35:03.654363"
  },
  {
    "id": "2",
    "title": "Java - OOPS",
    "description": "This course will teach the learner about Object Oriented Programming in Java. We will cover many topics like primitive data types, objects, classes, method overloading/overriding, encapsulation, inheritance, polymorphism, and etc.",
    "difficulty": "beginner",
    "language": "java",
    "progress": 0,
    "totalXP": 800,
    "dailyStreak": 0,
    "topics": [],
    "estimatedHours": 10,
    "completed": false,
    "thumbnail": null,
    "lessons": [
      {
        "id": "2_lesson_1",
        "title": "Primitive data types",
        "description": "int, boolean, char, etc.",
        "content": "Okay, let's craft a comprehensive lesson on Primitive Data Types in Java, designed for beginners. I'll structure this response with detailed explanations, code examples, practice exercises, and key takeaways.  I'll aim for clarity and a step-by-step approach.\n\n\n\n## Java - OOPs: Lesson - Primitive Data Types\n\n**Difficulty:** Beginner\n**Language:** Java\n**Duration:** Approximately 60-90 minutes (can be adjusted based on student pace)\n\n\n\n---\n\n### 1. Detailed Lesson Content with Explanations\n\n**Introduction (5 minutes)**\n\n*   **What are Data Types?**  Explain that data types define the kind of values a variable can hold.  Think of it like classifying things \u2013 numbers, text, true/false.\n*   **Why are Primitive Data Types Important?**  Primitive data types are the fundamental building blocks for representing data in Java.  They are the simplest data types provided by the language.  All other data types in Java are built upon these primitives.\n*   **Primitive vs. Reference Types:** Briefly mention the difference between primitive and reference types (objects).  Primitives hold the actual value directly, while reference types hold *references* (memory addresses) to objects.  We'll focus on primitives in this lesson.\n\n**Core Concepts: Primitive Data Types (45 minutes)**\n\nWe'll cover the following primitive data types, one at a time:\n\n*   **`byte`:**\n    *   **Description:**  Represents a signed 8-bit integer.\n    *   **Range:** -128 to 127\n    *   **Memory:** 1 byte\n    *   **Use Case:**  Suitable for storing small integer values where memory efficiency is crucial (e.g., representing individual pixels in an image).\n*   **`short`:**\n    *   **Description:** Represents a signed 16-bit integer.\n    *   **Range:** -32,768 to 32,767\n    *   **Memory:** 2 bytes\n    *   **Use Case:**  For storing slightly larger integer values than `byte` while still conserving memory.\n*   **`int`:**\n    *   **Description:** Represents a signed 32-bit integer.\n    *   **Range:** -2,147,483,648 to 2,147,483,647\n    *   **Memory:** 4 bytes\n    *   **Use Case:**  The most commonly used integer type.  Suitable for most general-purpose integer calculations.\n*   **`long`:**\n    *   **Description:** Represents a signed 64-bit integer.\n    *   **Range:** -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\n    *   **Memory:** 8 bytes\n    *   **Use Case:**  For storing very large integer values that exceed the range of `int`.  Important for applications dealing with large numbers (e.g., financial calculations, scientific computations).\n*   **`float`:**\n    *   **Description:** Represents a single-precision floating-point number.\n    *   **Range:** Approximately \u00b11.4e-45 to \u00b13.4e+38\n    *   **Memory:** 4 bytes\n    *   **Use Case:**  For representing real numbers (numbers with decimal points) when precision is not critical.  Uses less memory than `double`.\n*   **`double`:**\n    *   **Description:** Represents a double-precision floating-point number.\n    *   **Range:** Approximately \u00b14.9e-324 to \u00b11.7e+308\n    *   **Memory:** 8 bytes\n    *   **Use Case:**  The most commonly used floating-point type.  Provides higher precision than `float`.  Suitable for most general-purpose floating-point calculations.\n*   **`char`:**\n    *   **Description:** Represents a single Unicode character.\n    *   **Range:** 0 to 65,535\n    *   **Memory:** 2 bytes\n    *   **Use Case:**  For storing single characters (letters, numbers, symbols).\n*   **`boolean`:**\n    *   **Description:** Represents a logical value \u2013 either `true` or `false`.\n    *   **Range:** Only two values: `true` and `false`\n    *   **Memory:**  Typically 1 byte (implementation-dependent)\n    *   **Use Case:**  For representing conditions, flags, and logical operations.\n\n\n\n**Declaring and Initializing Variables (15 minutes)**\n\n*   **Variable Declaration:** Explain how to declare variables of different primitive types using the appropriate syntax:\n    ```java\n    int age;\n    double price;\n    char initial;\n    boolean isStudent;\n    ```\n*   **Initialization:**  Explain how to initialize variables when they are declared:\n    ```java\n    int age = 30;\n    double price = 99.99;\n    char initial = 'J';\n    boolean isStudent = true;\n    ```\n*   **Using Literals:** Explain the use of literal values (e.g., `10`, `3.14`, `'A'`, `true`) to initialize variables.\n*   **Naming Conventions:**  Briefly discuss Java naming conventions for variables (camelCase).\n\n\n\n### 2. Code Examples (15 minutes)\n\n```java\npublic class PrimitiveExamples {\n\n    public static void main(String[] args) {\n\n        // Integer examples\n        int age = 25;\n        int numberOfStudents = 30;\n        int maximumValue = Integer.MAX_VALUE; // Example of Integer.MAX_VALUE\n        int minimumValue = Integer.MIN_VALUE; // Example of Integer.MIN_VALUE\n\n        System.out.println(\"Age: \" + age);\n        System.out.println(\"Number of Students: \" + numberOfStudents);\n        System.out.println(\"Max Integer Value: \" + maximumValue);\n        System.out.println(\"Min Integer Value: \" + minimumValue);\n\n        // Floating-point examples\n        double pi = 3.14159;\n        double price = 19.99;\n\n        System.out.println(\"Pi: \" + pi);\n        System.out.println(\"Price: \" + price);\n\n        // Character example\n        char grade = 'A';\n        System.out.println(\"Grade: \" + grade);\n\n        // Boolean example\n        boolean isValid = true;\n        System.out.println(\"Is Valid: \" + isValid);\n\n        // Concatenating Strings and Variables\n        String message = \"The age is: \" + age;\n        System.out.println(message);\n    }\n}\n```\n\n### 3. Practice Exercises (20 minutes)\n\n1.  **Declare and initialize variables:**\n    *   Declare an `int` variable named `studentCount` and initialize it to the number of students in your class.\n    *   Declare a `double` variable named `temperature` and initialize it to the current temperature in Celsius.\n    *   Declare a `char` variable named `initial` and initialize it to your first initial.\n    *   Declare a `boolean` variable named `isRaining` and initialize it to `true` if it's raining, and `false` otherwise.\n\n2.  **Calculate and print:**\n    *   Calculate the area of a rectangle with a length of 10 and a width of 5, storing the result in a `double` variable. Print the area to the console.\n    *   Calculate the total cost of 3 items, each priced at $2.50, storing the result in a `double` variable. Print the total cost.\n\n3.  **String Concatenation:**\n    *   Create a string that includes your name, your age, and a greeting.  For example: \"Hello, my name is [your name] and I am [your age] years old!\".\n\n4.  **Challenge:**\n    *   Create a program that asks the user for their age (as an integer) and then prints a message indicating whether they are eligible to vote (assuming the voting age is 18).\n\n\n\n### 4. Key Takeaways\n\n*   **Primitive data types are fundamental:** They are the basic building blocks for representing data in Java.\n*   **Each data type has a specific range and memory size:** Understanding these characteristics is important for choosing the appropriate data type for a given task.\n*   **`int` is the most commonly used integer type:**  It's a good default choice for most integer calculations.\n*   **`double` is the most commonly used floating-point type:** It provides higher precision than `float`.\n*   **`boolean` is used for representing true/false values:** It's essential for control flow and logical operations.\n*   **Variable names should be descriptive and follow Java naming conventions (camelCase).**\n*   **Initialization is important:** Always initialize variables when you declare them to avoid unexpected behavior.\n\n\n\n---\n\n**Additional Notes for the Instructor:**\n\n*   **Visual Aids:** Use diagrams or charts to illustrate the ranges and memory sizes of different data types.\n*   **Interactive Coding:** Encourage students to write and run the code examples themselves.\n*   **Debugging:**  Provide guidance on how to debug code that has errors related to data types (e.g., integer overflow).\n*   **Real-World Examples:**  Relate the concepts to real-world applications (e.g., using `byte` to store pixel colors in an image, using `double` to calculate the distance between two points).\n*   **Gradual Progression:**  Don't overwhelm students with too much information at once.  Introduce concepts gradually and provide plenty of opportunities for practice.\n\n\n\nI hope this comprehensive lesson content is helpful!  Let me know if you'd like me to elaborate on any specific aspect or provide additional exercises.  I'm here to help!\n\n\n\n",
        "order": 1,
        "completed": false,
        "xpReward": 100,
        "createdAt": "2025-07-31T21:40:26.179263",
        "updatedAt": "2025-07-31T21:40:26.179553"
      },
      {
        "id": "2_lesson_2",
        "title": "Objects",
        "description": "Teach what objects are and how they work and how to call methods in it and stuff.",
        "content": "Okay, let's craft a comprehensive lesson on \"Objects\" for a beginner-level Java OOP course.  I'll structure this with detailed explanations, code examples, practice exercises, and key takeaways.  I'll aim for clarity and a step-by-step approach.\n\n\n\n## Java - OOPs: Lesson - Objects\n\n**Difficulty:** Beginner\n**Language:** Java\n**Duration:**  Approximately 2-3 hours (can be broken into smaller chunks)\n\n\n\n---\n\n### 1. Detailed Lesson Content\n\n**1. Introduction: What is Object-Oriented Programming (OOP)?**\n\n*   **Brief Overview:**  OOP is a programming paradigm (a way of structuring code) that revolves around \"objects.\"  Instead of writing code as a sequence of instructions, we model real-world entities as objects.\n*   **Why OOP?**  OOP promotes code reusability, modularity, and easier maintenance. It helps organize complex programs into manageable units.\n*   **Key Concepts:**  The core concepts of OOP are:\n    *   **Objects:**  Instances of classes.\n    *   **Classes:**  Blueprints or templates for creating objects.\n    *   **Encapsulation:** Bundling data (attributes) and methods (behavior) that operate on that data within a class.\n    *   **Inheritance:** Creating new classes (derived classes) based on existing classes (base classes), inheriting their attributes and methods.\n    *   **Polymorphism:**  The ability of objects of different classes to respond to the same method call in their own way.\n\n**2. What are Objects?**\n\n*   **Real-World Analogy:** Think of objects as things in the real world.  A `Dog` is an object. A `Car` is an object.  A `Student` is an object.\n*   **Attributes (Data):** Objects have *attributes* that describe them. These are variables that hold data about the object.  For example, a `Dog` object might have attributes like `name`, `breed`, `age`, and `color`.\n*   **Methods (Behavior):** Objects can *do* things. These are *methods*.  Methods are functions associated with an object that define its behavior.  A `Dog` object might have methods like `bark()`, `fetch()`, and `eat()`.\n*   **Object Creation:**  Objects are created from *classes*.  A class is like a blueprint.  You use the blueprint to build multiple objects.\n\n**3. Classes: The Blueprint**\n\n*   **Definition:** A class is a template or a blueprint for creating objects. It defines the attributes and methods that objects of that class will have.\n*   **Syntax:**\n    ```java\n    class Dog {\n        // Attributes (variables)\n        String name;\n        String breed;\n        int age;\n        String color;\n\n        // Methods (functions)\n        void bark() {\n            System.out.println(\"Woof!\");\n        }\n\n        void fetch() {\n            System.out.println(\"Fetching the ball!\");\n        }\n\n        void eat() {\n            System.out.println(\"Eating food...\");\n        }\n    }\n    ```\n*   **Explanation:**\n    *   `class Dog { ... }`:  This declares a class named `Dog`.\n    *   `String name;`, `String breed;`, etc.: These are the attributes (variables) of the `Dog` class.  They store information about each `Dog` object.\n    *   `void bark() { ... }`, `void fetch() { ... }`, etc.: These are the methods of the `Dog` class. They define the actions that a `Dog` object can perform.\n    *   `void`:  Indicates that the method doesn't return any value.\n    *   `System.out.println(...)`:  Prints text to the console.\n\n**4. Creating Objects (Instances)**\n\n*   **Instantiation:**  Creating an object from a class is called *instantiation*.\n*   **Syntax:**\n    ```java\n    public class Main {\n        public static void main(String[] args) {\n            // Create Dog objects\n            Dog dog1 = new Dog(); // Create a new Dog object named dog1\n            dog1.name = \"Buddy\";\n            dog1.breed = \"Golden Retriever\";\n            dog1.age = 3;\n            dog1.color = \"Golden\";\n\n            Dog dog2 = new Dog();\n            dog2.name = \"Lucy\";\n            dog2.breed = \"Labrador\";\n            dog2.age = 5;\n            dog2.color = \"Black\";\n        }\n    }\n    ```\n*   **Explanation:**\n    *   `Dog dog1 = new Dog();`: This creates a new `Dog` object named `dog1`.  The `new` keyword allocates memory for the object.\n    *   `dog1.name = \"Buddy\";`: This sets the `name` attribute of the `dog1` object to \"Buddy\".\n    *   We create two `Dog` objects, `dog1` and `dog2`, each with different attribute values.\n\n**5. Calling Methods**\n\n*   **Syntax:**\n    ```java\n    public class Main {\n        public static void main(String[] args) {\n            Dog dog1 = new Dog();\n            dog1.name = \"Buddy\";\n            dog1.breed = \"Golden Retriever\";\n            dog1.age = 3;\n            dog1.color = \"Golden\";\n\n            // Call the bark() method on the dog1 object\n            dog1.bark(); // Output: Woof!\n\n            // Call the fetch() method on the dog1 object\n            dog1.fetch(); // Output: Fetching the ball!\n        }\n    }\n    ```\n*   **Explanation:**\n    *   `dog1.bark();`:  This calls the `bark()` method on the `dog1` object.  We use the dot operator (`.`) to access the object's attributes and methods.\n    *   When you call a method, the program executes the code within that method, using the data associated with the object.\n\n---\n\n### 2. Code Examples\n\nHere are a few more code examples to illustrate the concepts:\n\n**Example 1:  A Simple `Rectangle` Class**\n\n```java\nclass Rectangle {\n    double width;\n    double height;\n\n    // Constructor (special method to create objects)\n    Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    // Method to calculate the area\n    double calculateArea() {\n        return width * height;\n    }\n\n    // Method to display the dimensions\n    void displayDimensions() {\n        System.out.println(\"Width: \" + width);\n        System.out.println(\"Height: \" + height);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Rectangle rect1 = new Rectangle(5.0, 10.0); // Create a Rectangle object\n        rect1.displayDimensions(); // Display dimensions\n        System.out.println(\"Area: \" + rect1.calculateArea()); // Calculate and display area\n\n        Rectangle rect2 = new Rectangle(3.0, 7.0);\n        System.out.println(\"Area of rect2: \" + rect2.calculateArea());\n    }\n}\n```\n\n**Example 2:  A `Student` Class with Inheritance**\n\n```java\nclass Person {\n    String name;\n    int age;\n\n    Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    void displayInfo() {\n        System.out.println(\"Name: \" + name + \", Age: \" + age);\n    }\n}\n\nclass Student extends Person { // Student inherits from Person\n    String studentId;\n    String major;\n\n    Student(String name, int age, String studentId, String major) {\n        super(name, age); // Call the Person constructor\n        this.studentId = studentId;\n        this.major = major;\n    }\n\n    void displayStudentInfo() {\n        super.displayInfo(); // Call the Person's displayInfo() method\n        System.out.println(\"Student ID: \" + studentId);\n        System.out.println(\"Major: \" + major);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student1 = new Student(\"Alice\", 20, \"12345\", \"Computer Science\");\n        student1.displayStudentInfo();\n    }\n}\n```\n\n---\n\n### 3. Practice Exercises\n\n1.  **Create a `Car` class:**\n    *   Attributes: `make` (String), `model` (String), `year` (int), `color` (String), `speed` (int).\n    *   Methods: `startEngine()`, `accelerate(int increment)`, `brake(int decrement)`, `displayInfo()`.\n    *   Create two `Car` objects with different attributes and call the `displayInfo()` method on each.\n\n2.  **Create a `Shape` class:**\n    *   Attributes:  None (just use methods).\n    *   Methods: `calculateArea()`, `calculatePerimeter()`.\n    *   Create three subclasses: `Circle`, `Rectangle`, and `Triangle`.  Each subclass should *extend* the `Shape` class and override the `calculateArea()` and `calculatePerimeter()` methods to calculate the area and perimeter specific to that shape.\n    *   Create objects of each of the three subclasses and call their `calculateArea()` and `calculatePerimeter()` methods.\n\n3.  **Create a `BankAccount` class:**\n    *   Attributes: `accountNumber` (String), `accountHolderName` (String), `balance` (double).\n    *   Methods: `deposit(double amount)`, `withdraw(double amount)`, `getBalance()`.\n    *   Create a `BankAccount` object, deposit some money, withdraw some money, and then display the current balance.\n\n---\n\n### 4. Key Takeaways\n\n*   **Objects are fundamental to OOP.** They represent real-world entities and encapsulate data and behavior.\n*   **Classes are blueprints for objects.** They define the attributes and methods that objects of that class will have.\n*   **Attributes store data about objects.**\n*   **Methods define the behavior of objects.**\n*   **Objects are created using the `new` keyword.**\n*   **Methods are called using the dot operator (`.`)**.\n*   **Inheritance allows you to create new classes based on existing classes, promoting code reuse.**\n*   **Encapsulation helps protect data by bundling it with methods that control access to it.**\n*   **Polymorphism allows objects of different classes to be treated as objects of a common type.**\n\n\n\n---\n\n**Further Exploration:**\n\n*   **Encapsulation:**  Learn about access modifiers (private, protected, public) to control access to object attributes.\n*   **Inheritance:**  Explore single inheritance and multiple inheritance.\n*   **Polymorphism:**  Learn about method overriding and interfaces.\n\n\n\nI hope this comprehensive lesson is helpful!  Let me know if you have any questions or would like me to elaborate on any of these topics.  I'm happy to provide more examples or help you with the practice exercises.  Good luck with your Java OOP journey!\n\n\n\n",
        "order": 2,
        "completed": false,
        "xpReward": 100,
        "createdAt": "2025-07-31T21:47:23.064089",
        "updatedAt": "2025-07-31T21:47:23.064333"
      },
      {
        "id": "2_lesson_3",
        "title": "Classes",
        "description": "How they work and how to make a class with coding examples.",
        "content": "Okay, let's craft a comprehensive lesson on Classes in Java, designed for beginners. I'll break it down into the sections you requested \u2013 detailed content, code examples, practice exercises, and key takeaways \u2013 all formatted for clarity.\n\n\n\n## Java - OOPs: Lesson - Classes (Beginner Level)\n\n### 1. Detailed Lesson Content\n\n**Introduction to Object-Oriented Programming (OOP)**\n\nBefore diving into classes, it's crucial to understand *why* we use OOP.  OOP is a programming paradigm that structures software design around *objects*, rather than functions and logic.  This makes code more organized, reusable, and easier to maintain.  Key concepts in OOP include:\n\n*   **Objects:**  Represent real-world entities or abstract concepts.  They have *state* (data) and *behavior* (actions they can perform).\n*   **Classes:**  Blueprints or templates for creating objects.  They define the characteristics (attributes/data) and actions (methods) that objects of that type will have.\n*   **Encapsulation:** Bundling data (attributes) and methods that operate on that data within a single unit (the class).  This helps protect data from accidental modification and promotes modularity.\n*   **Inheritance:**  Creating new classes (subclasses) based on existing classes (superclasses).  Subclasses inherit the attributes and methods of the superclass and can add their own.\n*   **Polymorphism:**  The ability of objects of different classes to respond to the same method call in their own way.\n\n**What are Classes?**\n\nThink of a class as a cookie cutter. The cookie cutter defines the shape of the cookie.  A class defines the characteristics of an object.  \n\nA class is a blueprint that describes what an object will look like and what it can do.  It defines:\n\n*   **Attributes (or Instance Variables):**  These are the data that describe the object.  They hold the object's state.  Think of them as the characteristics of the object (e.g., color, size, name).\n*   **Methods:** These are the actions that the object can perform.  They define the object's behavior.  Think of them as the things the object can *do* (e.g., move, speak, calculate).\n\n**Why Use Classes?**\n\n*   **Organization:** Classes help organize code into logical units, making it easier to understand and maintain.\n*   **Reusability:**  Once a class is defined, you can create multiple objects (instances) of that class.\n*   **Modularity:** Classes promote modular design, where different parts of the program can be developed and tested independently.\n*   **Abstraction:** Classes allow you to hide complex implementation details and expose only the necessary information to the outside world.\n\n\n\n### 2. Code Examples (Java)\n\nLet's create a simple `Dog` class to illustrate the concepts.\n\n```java\n// Define a class named Dog\nclass Dog {\n\n    // Attributes (Instance Variables)\n    String name;\n    String breed;\n    int age;\n\n    // Constructor - special method to initialize objects\n    // This is called when a new Dog object is created.\n    public Dog(String name, String breed, int age) {\n        this.name = name;  // 'this' refers to the current object\n        this.breed = breed;\n        this.age = age;\n    }\n\n    // Method - Action the Dog can perform\n    public void bark() {\n        System.out.println(\"Woof! My name is \" + this.name);\n    }\n\n    // Method to display the dog's information\n    public void displayInfo() {\n        System.out.println(\"Name: \" + this.name);\n        System.out.println(\"Breed: \" + this.breed);\n        System.out.println(\"Age: \" + this.age);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create two Dog objects (instances of the Dog class)\n        Dog dog1 = new Dog(\"Buddy\", \"Golden Retriever\", 3);\n        Dog dog2 = new Dog(\"Lucy\", \"Poodle\", 5);\n\n        // Access attributes and call methods of the objects\n        System.out.println(\"Dog 1:\");\n        dog1.displayInfo(); // Calls the displayInfo() method on dog1\n        dog1.bark();\n\n        System.out.println(\"\\nDog 2:\");\n        dog2.displayInfo();\n        dog2.bark();\n    }\n}\n```\n\n**Explanation:**\n\n*   **`class Dog { ... }`**:  This defines the `Dog` class.\n*   **`String name;`, `String breed;`, `int age;`**: These are the attributes of the `Dog` class.  Each `Dog` object will have its own `name`, `breed`, and `age`.\n*   **`public Dog(String name, String breed, int age) { ... }`**: This is the constructor.  It's a special method that's called when you create a new `Dog` object.  It initializes the object's attributes with the values you provide.  The `this` keyword is used to differentiate between the instance variables and the parameters of the constructor.\n*   **`public void bark() { ... }`**: This is a method that defines the `bark` behavior of a `Dog` object.  It prints a message to the console.\n*   **`public void displayInfo() { ... }`**: This method displays the dog's information.\n*   **`public class Main { ... }`**: This is the main class where the program execution begins.\n*   **`Dog dog1 = new Dog(\"Buddy\", \"Golden Retriever\", 3);`**: This creates a new `Dog` object named `dog1`.  It calls the constructor to initialize the object's attributes.\n*   **`dog1.displayInfo();`**: This calls the `displayInfo()` method on the `dog1` object.\n*   **`dog1.bark();`**: This calls the `bark()` method on the `dog1` object.\n\n\n\n### 3. Practice Exercises\n\n1.  **Create a `Car` class:**\n    *   Define attributes for `color`, `make`, `model`, and `year`.\n    *   Add a constructor to initialize these attributes.\n    *   Add a method called `startEngine()` that prints a message to the console.\n    *   Add a method called `displayInfo()` that displays the car's information.\n    *   Create two `Car` objects and call the `displayInfo()` and `startEngine()` methods on them.\n\n2.  **Create a `Rectangle` class:**\n    *   Define attributes for `width` and `height`.\n    *   Add a constructor to initialize these attributes.\n    *   Add a method called `calculateArea()` that returns the area of the rectangle.\n    *   Add a method called `displayInfo()` that displays the rectangle's width, height, and area.\n    *   Create a `Rectangle` object and call the `displayInfo()` and `calculateArea()` methods on it.\n\n3.  **Create a `Student` class:**\n    *   Define attributes for `name`, `studentId`, and `grade`.\n    *   Add a constructor to initialize these attributes.\n    *   Add a method called `displayInfo()` that displays the student's information.\n    *   Add a method called `isEligibleToGraduate()` that returns `true` if the student's grade is 90 or above, and `false` otherwise.\n    *   Create two `Student` objects and call the `displayInfo()` and `isEligibleToGraduate()` methods on them.\n\n\n\n### 4. Key Takeaways\n\n*   **Classes are blueprints for objects.** They define the attributes and methods that objects of that type will have.\n*   **Attributes store data about an object.**\n*   **Methods define the behavior of an object.**\n*   **The constructor is a special method used to initialize objects.**\n*   **You can create multiple objects (instances) of a class.**\n*   **Classes promote organization, reusability, and modularity in your code.**\n*   **Understanding classes is fundamental to object-oriented programming.**\n\n\n\n**Further Exploration:**\n\n*   **Inheritance:**  Learn how to create subclasses that inherit attributes and methods from superclasses.\n*   **Encapsulation:**  Explore how to use access modifiers (e.g., `private`, `protected`) to control access to attributes.\n*   **Polymorphism:**  Discover how to write code that can work with objects of different classes in a uniform way.\n\n\n\nI hope this comprehensive lesson helps you understand classes in Java!  Let me know if you have any questions or would like me to elaborate on any of these topics.  I'm here to help you succeed!\n\n\n\n",
        "order": 3,
        "completed": false,
        "xpReward": 100,
        "createdAt": "2025-07-31T21:51:47.605352",
        "updatedAt": "2025-07-31T21:51:47.605409"
      },
      {
        "id": "2_lesson_4",
        "title": "Methods and Overloading/Overriding",
        "description": "Explain what methods are, how they work, and how to overload/override a method and how to call methods on objects. ",
        "content": "Lesson content for Methods and Overloading/Overriding will be generated soon.",
        "order": 4,
        "completed": false,
        "xpReward": 100,
        "createdAt": "2025-07-31T21:56:18.172596",
        "updatedAt": "2025-07-31T21:56:18.172702"
      },
      {
        "id": "2_lesson_5",
        "title": "Encapsulation",
        "description": "Teach about encapsulation with coding examples.",
        "content": "Lesson content for Encapsulation will be generated soon.",
        "order": 5,
        "completed": false,
        "xpReward": 100,
        "createdAt": "2025-07-31T21:56:18.175972",
        "updatedAt": "2025-07-31T21:56:18.175987"
      },
      {
        "id": "2_lesson_6",
        "title": "Inheritance",
        "description": "What is inheritance and how does it work?",
        "content": "Lesson content for Inheritance will be generated soon.",
        "order": 6,
        "completed": false,
        "xpReward": 100,
        "createdAt": "2025-07-31T21:56:18.176605",
        "updatedAt": "2025-07-31T21:56:18.176612"
      },
      {
        "id": "2_lesson_7",
        "title": "Polymorphism",
        "description": "What is polymorphism and how does it work?",
        "content": "Lesson content for Polymorphism will be generated soon.",
        "order": 7,
        "completed": false,
        "xpReward": 100,
        "createdAt": "2025-07-31T21:56:18.177026",
        "updatedAt": "2025-07-31T21:56:18.177032"
      },
      {
        "id": "2_lesson_8",
        "title": "Extra knowledge",
        "description": "Anything that wasn't covered in the other lessons.",
        "content": "Lesson content for Extra knowledge will be generated soon.",
        "order": 8,
        "completed": false,
        "xpReward": 100,
        "createdAt": "2025-07-31T21:56:18.177407",
        "updatedAt": "2025-07-31T21:56:18.177412"
      }
    ],
    "createdAt": "2025-07-31T21:34:40.169332",
    "updatedAt": "2025-07-31T21:34:40.169404"
  }
]